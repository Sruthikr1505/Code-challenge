class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
       
        window_sum = [0] * (n - k + 1)
        curr_sum = sum(nums[:k])
        window_sum[0] = curr_sum
        for i in range(1, len(window_sum)):
            curr_sum += nums[i + k - 1] - nums[i - 1]
            window_sum[i] = curr_sum
        
       
        left = [0] * len(window_sum)
        max_idx = 0
        for i in range(len(window_sum)):
            if window_sum[i] > window_sum[max_idx]:
                max_idx = i
            left[i] = max_idx

        
        right = [0] * len(window_sum)
        max_idx = len(window_sum) - 1
        for i in range(len(window_sum) - 1, -1, -1):
            if window_sum[i] >= window_sum[max_idx]:
                max_idx = i
            right[i] = max_idx

      
        max_sum = 0
        result = [-1, -1, -1]
        for mid in range(k, len(window_sum) - k):
            left_idx = left[mid - k]
            right_idx = right[mid + k]
            total_sum = window_sum[left_idx] + window_sum[mid] + window_sum[right_idx]
            if total_sum > max_sum:
                max_sum = total_sum
                result = [left_idx, mid, right_idx]

        return result
