class Solution:
    def findTargetSumWays(self, nums, target):
        dp = {}
        def backtrack(index, current_sum):
            if index == len(nums):
                return 1 if current_sum == target else 0

            if (index, current_sum) in dp:
                return dp[(index, current_sum)]

            
            add = backtrack(index + 1, current_sum + nums[index])
           
            subtract = backtrack(index + 1, current_sum - nums[index])

            dp[(index, current_sum)] = add + subtract
            return dp[(index, current_sum)]

        return backtrack(0, 0)



def _driver():
    param_1 = [1, 1, 1, 1, 1]  # Example input array
    param_2 = 3  # Example target sum
    ret = Solution().findTargetSumWays(param_1, param_2)
    print(f"Number of ways: {ret}")


if __name__ == "__main__":
    _driver()
